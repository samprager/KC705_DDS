# 
# Synthesis run script generated by Vivado
# 

namespace eval rt {
    variable rc
}
set rt::rc [catch {
  uplevel #0 {
    set ::env(BUILTIN_SYNTH) true
    source $::env(HRT_TCL_PATH)/rtSynthPrep.tcl
    set rt::cmdEcho 0
    rt::set_parameter writeXmsg true
    set ::env(RT_TMP) "./.Xil/Vivado-9316-radar-PC/realtime/tmp"
    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
      file mkdir $::env(RT_TMP)
    }

    rt::delete_design

    set rt::partid xc7k325tffg900-2

    source $::env(SYNTH_COMMON)/common.tcl
    set rt::defaultWorkLibName xil_defaultlib

    set rt::useElabCache false
    if {$rt::useElabCache == false} {
      rt::read_verilog -include d:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/ip/kc705_ethernet_rgmii/tri_mode_ethernet_mac_v8_2/hdl {
      ./.Xil/Vivado-9316-radar-PC/realtime/kc705_ethernet_rgmii_stub.v
      ./.Xil/Vivado-9316-radar-PC/realtime/mig_7series_0_stub.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/traffic_gen/mig_7series_v2_1_data_gen_chk.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/traffic_gen/mig_7series_v2_1_cmd_prbs_gen_axi.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/fifo/kc705_ethernet_rgmii_bram_tdp.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/common/kc705_ethernet_rgmii_sync_block.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/common/kc705_ethernet_rgmii_reset_sync.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/traffic_gen/mig_7series_v2_1_tg.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/traffic_gen/mig_7series_v2_1_axi4_wrapper.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/support/kc705_ethernet_rgmii_support_resets.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/support/kc705_ethernet_rgmii_support_clocking.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/fifo/kc705_ethernet_rgmii_tx_client_fifo.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/fifo/kc705_ethernet_rgmii_rx_client_fifo.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/traffic_gen/mig_7series_v2_1_axi4_tg.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/support/kc705_ethernet_rgmii_support.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_axi_pipe.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_axi_pat_gen.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_axi_pat_check.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_axi_mux.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_address_swap.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/kc705_ethernet_rgmii_clk_wiz.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/fifo/kc705_ethernet_rgmii_ten_100_1g_eth_fifo.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/mig_7series_0_example_select_srcs/mig_example_top.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/pat_gen/kc705_ethernet_rgmii_basic_pat_gen.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/kc705_ethernet_rgmii_fifo_block.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/kc705_ethernet_rgmii_example_design_resets.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/kc705_ethernet_rgmii_example_design_clocks.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/axi_lite_sm/kc705_ethernet_rgmii_axi_lite_sm.v
      D:/Prager/KC705_DDS/Verilog/ethernet_mig_sp/ethernet_mig_sp.srcs/sources_1/imports/example_design/kc705_ethernet_rgmii_example_design.v
    }
      rt::filesetChecksum
    }
    rt::set_parameter usePostFindUniquification false
    set rt::top kc705_ethernet_rgmii_example_design
    set rt::reportTiming false
    rt::set_parameter elaborateOnly true
    rt::set_parameter elaborateRtl true
    rt::set_parameter eliminateRedundantBitOperator false
    rt::set_parameter writeBlackboxInterface true
    rt::set_parameter merge_flipflops true
    rt::set_parameter srlDepthThreshold 3
    rt::set_parameter rstSrlDepthThreshold 4
    rt::set_parameter enableSplitFlowPath "./.Xil/Vivado-9316-radar-PC/"
    if {$rt::useElabCache == false} {
      rt::run_rtlelab -module $rt::top
    }

    set rt::flowresult [ source $::env(SYNTH_COMMON)/flow.tcl ]
    if { $rt::flowresult == 1 } { return -code error }

    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
    }


    source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  } ; #end uplevel
} rt::result]

if { $rt::rc } {
  return -code "error" $rt::result
}
